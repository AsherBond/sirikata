/*  Sirikata Serialization Protocol
 *  Persistence.pbj
 *
 *  Copyright (c) 2009, Daniel Reiter Horn
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are
 *  met:
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *  * Neither the name of Sirikata nor the names of its contributors may
 *    be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package Sirikata.Persistence.Protocol;


message StorageKey {
    reserve 1 to 6;//in case we ever need to forward these around a bit
    ///the name of the specific broadcast to listen to
    optional uuid object_uuid=7;
    optional uint64 field_id=8;
    optional string field_name=10;
    
    reserve 1536 to 2560;
    reserve 229376 to 294912;
}
message StorageValue {
    reserve 1 to 6;//in case we ever need to forward these around a bit
    ///the name of the specific broadcast to listen to
    optional bytes data=11;    
    reserve 1536 to 2560;
    reserve 229376 to 294912;
}

message StorageElement {
    reserve 1 to 6;//in case we ever need to forward these around a bit
    ///the name of the specific broadcast to listen to
    optional uuid object_uuid=7;
    optional uint64 field_id=8;
    optional string field_name=10;
    optional bytes data=11;    
    reserve 1536 to 2560;
    reserve 229376 to 294912;
}

message CompareElement {
    reserve 1 to 6;//in case we ever need to forward these around a bit
    ///the name of the specific broadcast to listen to
    optional uuid object_uuid=7;
    optional uint64 field_id=8;
    optional string field_name=10;
    optional bytes data=11;    
    enum COMPARATOR {
      EQUAL=0;
      GREATER=1;
      GEQUAL=2;
      LESS=3;
      LEQUAL=4;
    }
    optional COMPARATOR comparator=12;
    reserve 1536 to 2560;
    reserve 229376 to 294912;
}

message ReadSet {
  reserve 1 to 6;//in case we ever need to forward these around a bit
  repeated StorageElement reads=7;
  optional int64 id=9;
  reserve 1536 to 2560;
  reserve 229376 to 294912;
}
message WriteSet {
   reserve 1 to 6;//in case we ever need to forward these around a bit
   repeated StorageElement writes=8;
   optional int64 id=9;
   reserve 1536 to 2560;
   reserve 229376 to 294912;
}
message ReadWriteSet {
  reserve 1 to 6;//in case we ever need to forward these around a bit
  repeated StorageElement reads=7;
  repeated StorageElement writes=8;
  optional int64 id=9;
  reserve 1536 to 2560;
  reserve 229376 to 294912;
}
message Minitransaction{
  repeated StorageElement reads=7;
  repeated StorageElement writes=8;
  repeated CompareElement compares=10;
  optional int64 id=9;
}
message Response {
  reserve 1 to 6;//in case we ever need to forward these around a bit
  repeated StorageElement reads=7;
  optional int64 id=9;
  enum ReturnStatus {
    SUCCESS = 0;
    NETWORK_FAILURE = 1;
    SECURITY_FAILURE = 2;
    TIMEOUT_FAILURE = 3;
    KEY_MISSING = 4;
    COMPARISON_FAILED = 5;
    INTERNAL_ERROR = 6;
  }
  optional ReturnStatus return_status=16; 
}
